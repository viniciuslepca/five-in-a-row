{"version":3,"sources":["index.js","images/game.jpg"],"names":["gameImage","require","socket","io","App","props","setActivePage","page","setState","activePage","renderActivePage","state","pages","PLAY","Game","RULES","Rules","Header","this","React","Component","className","Board","_isMounted","restartGame","a","emit","updateState","data","response","JSON","parse","boardData","winner","userTurn","userStone","numPlayers","handleCellClick","x","y","cellState","renderBoard","isPlayerTurn","isGameOver","id","map","row","item","key","length","Cell","onClick","value","renderMessage","message","renderRestartButton","on","undefined","isActive","src","style","height","bg","variant","Brand","href","defaultActiveKey","onSelect","selectedKey","Object","keys","pageName","Link","eventKey","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.951b1f62.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Button from 'react-bootstrap/Button';\r\nimport io from 'socket.io-client';\r\n\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst gameImage = require('./images/game.jpg');\r\nconst baseUrl = \"http://localhost:5000\";\r\n// Set up socket.io\r\nconst socket = io(baseUrl);\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const pages = {\r\n            'PLAY': 'Play',\r\n            'RULES': 'Rules'\r\n        };\r\n\r\n        this.state = {\r\n            activePage: pages.PLAY,\r\n            pages: pages\r\n        };\r\n    }\r\n\r\n    setActivePage = (page) => {\r\n        this.setState({activePage: page});\r\n    };\r\n\r\n    renderActivePage = () => {\r\n        switch (this.state.activePage) {\r\n            case this.state.pages.PLAY:\r\n                return <Game/>\r\n            case this.state.pages.RULES:\r\n                return <Rules/>;\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header pages={this.state.pages}\r\n                        setActivePage={this.setActivePage}/>\r\n                {this.renderActivePage()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Game() {\r\n    return (\r\n        <div className=\"game\">\r\n            <Board/>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            boardData: null,\r\n            winner: null,\r\n            userTurn: null,\r\n            userStone: null,\r\n            numPlayers: null\r\n        }\r\n    }\r\n\r\n    restartGame = async () => {\r\n        socket.emit('reset_game');\r\n    }\r\n\r\n    updateState = (data) => {\r\n        if (this._isMounted) {\r\n            const response = JSON.parse(data);\r\n            this.setState({\r\n                boardData: response['board_data'],\r\n                winner: response['winner'],\r\n                userTurn: response['user_turn'],\r\n                userStone: response['user_stone'],\r\n                numPlayers: response['num_players']\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        // If connection fails, set boardData to undefined and display error\r\n        socket.on('connect_error', () => {\r\n            if (this._isMounted) this.setState({boardData: undefined})\r\n        })\r\n\r\n        // Receive board updates\r\n        socket.on('update_board', this.updateState)\r\n\r\n        // Request data\r\n        socket.emit('get_board', this.updateState)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    handleCellClick = async (x, y) => {\r\n        if (this.state.winner === null && this.state.boardData[x][y].cellState === null) {\r\n            socket.emit('make_play', x, y)\r\n        }\r\n    }\r\n\r\n    renderBoard = (data, isPlayerTurn, isGameOver) => {\r\n        return (\r\n            <div id=\"board\" className=\"center-content\">\r\n                {\r\n                    data.map((row) => {\r\n                        return row.map((item) => {\r\n                            return (\r\n                                <div key={item.x * row.length + item.y}>\r\n                                    <Cell\r\n                                        onClick={() => this.handleCellClick(item.x, item.y)}\r\n                                        value={item}\r\n                                        isPlayerTurn={isPlayerTurn}\r\n                                        isGameOver={isGameOver}\r\n                                    />\r\n                                    {(row[row.length - 1] === item) ?\r\n                                        <div className=\"clear\"/> : \"\"}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderMessage = (isGameOver, isPlayerTurn) => {\r\n        let message = \"\";\r\n        if (isGameOver) {\r\n            if (this.state.winner === socket.id) {\r\n                message = \"Congratulations, you won the game!\";\r\n            } else {\r\n                message = \"You lost the game :(\";\r\n            }\r\n        } else if (isPlayerTurn) {\r\n            message = \"It's your turn! Playing \" + this.state.userStone;\r\n        } else {\r\n            message = \"Waiting for the other player...\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"center-content\">\r\n                <p>{message}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRestartButton = (isGameOver) => {\r\n        if (isGameOver) {\r\n            return (\r\n                <div className=\"center-content\">\r\n                    <Button onClick={this.restartGame}>Restart Game</Button>\r\n                </div>\r\n            )\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        if (this.state.boardData === null) return null;\r\n\r\n        if (this.state.boardData === undefined) {\r\n            // Case where connection failed\r\n            return (\r\n                <div className=\"center-content\">\r\n                    <p>It seems like there already are 2 players connected.</p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (this.state.numPlayers === 1) {\r\n            return (\r\n                <div className=\"center-content\">\r\n                    <p>Waiting for a second player to connect.</p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const isGameOver = (this.state.winner !== null);\r\n        const isPlayerTurn = (socket.id === this.state.userTurn);\r\n        return (\r\n            <div>\r\n                {this.renderMessage(isGameOver, isPlayerTurn)}\r\n                {this.renderRestartButton(isGameOver)}\r\n                {this.renderBoard(this.state.boardData, isPlayerTurn, isGameOver)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Cell extends React.Component {\r\n    render() {\r\n        const isActive = (!this.props.isGameOver && this.props.isPlayerTurn\r\n            && this.props.value.cellState === null);\r\n        return (\r\n            <div\r\n                className={\"cell\" + (isActive ? \" active\" : \"\")}\r\n                onClick={this.props.onClick}>\r\n                {this.props.value.cellState}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Rules() {\r\n    return (\r\n        <div id=\"rules-body\">\r\n            <Image src={gameImage} style={{height: 400}}/>\r\n            <p>\r\n                Gomoku, also called Five in a Row, is an abstract strategy board\r\n                game. It is traditionally played with Go pieces (black and white\r\n                stones) on a Go board.\r\n\r\n                Players alternate turns placing a stone of their color on an\r\n                empty intersection. The winner is the first player to form an\r\n                unbroken chain of five stones horizontally, vertically, or\r\n                diagonally.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n            <Navbar.Brand href=\"#home\">Five in a Row</Navbar.Brand>\r\n            <Nav className=\"mr-auto\" defaultActiveKey={props.pages.PLAY}\r\n                 onSelect={(selectedKey) => props.setActivePage(selectedKey)}>\r\n                {Object.keys(props.pages).map(pageName => {\r\n                    const page = props.pages[pageName];\r\n                    return <Nav.Link key={page}\r\n                                     eventKey={page}>{page}</Nav.Link>\r\n                })}\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n","module.exports = __webpack_public_path__ + \"static/media/game.ecfa66ef.jpg\";"],"sourceRoot":""}